#!/bin/bash 
# Prints the content of a given file, or specific lines of that file, for each revision.
# Based on http://stackoverflow.com/questions/17785265/list-all-the-versions-of-a-given-line-number-in-the-git-history
# Place this somewhere in your path and you can invoke it with `git timemachine ...` (see full usage below)

function usage() {
cat <<EOF
	Usage: $(basename $0) FILE [START [END]]

	Where START and END use the same format as git blame, i.e.
	START can be any of:
	- Line number (ex: 100)
	- /Regex/ (ex: /foo/)

	and END can be any of the above plus:
	- +offset (ex: +1)
	- -offset (ex: -1)

	if END is omitted, only matching lines will be shown
	  
EOF
}


if [ $# -eq 0 ] ; then
    usage
    exit 1
fi

if [ $# -ge 4 ]; then
    usage
    exit 2
fi

if [ $# -ge 1 ] ; then
    FILE=$1
fi

if [ $# -eq 2 ]; then
    if [[ "$2" =~ ^[0-9]\+$ ]] ; then
	RANGE="$2,$2"
    else
	RANGE="$2,+1"
    fi
    LINES="-L $RANGE"
fi

if [ $# -eq 3 ]; then
    LINES="-L $2,$3"
fi

function clean() {
    echo "$@" | sed 's/^.*[0-9])  //'
}

function show() {
    echo "$@" 
    echo "----"
}

if [ ! -e "$FILE" ]; then
    echo "ERROR: file does not exist - '$FILE'" >&2
    exit 3
fi


OLD="==first entry==" 
for REV in $(git log --format=format:%H $FILE)
do
    if [ "$OLD" = "==first entry==" ]; then
        OLD=$NEW
        continue
    fi
    NEW=$(git blame $FILE $LINES $REV 2>/dev/null)
    GIT_RETURN=$?
    if [ "$(clean "$OLD")" != "$(clean "$NEW")" ]; then 
        if [ $GIT_RETURN -eq 0 ]; then 
            show "$NEW"
        else
            echo "== As of commit ${REV:0:8} =="
            echo "NO MATCH"
        fi
        OLD=$NEW
    fi
done
